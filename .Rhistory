style = "kmeans",
dataPrecision = 0)
colorPallette <- findColours(intervals, colors)
legendText="intervals"
shrinkLegend=1
title="Under 5 mortality rate by province"
# first the ORIGINAL to signal missing values:
plot(mozzipMap,col='red',main=title, border="black", lwd=1)
# now the info on contributions
plot(layerContrib_2, col = colorPallette,border=NA,add=T) #add
# this uses all previous information
legend('topright',
legend = names(attr(colorPallette, "table")), #values
fill = attr(colorPallette, "palette"), #colors
cex = shrinkLegend, #size
bty = "n", # no box
title=legendText)
library(classInt)
#layerContrib
numberOfClasses=5
colorForScale='Set1'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot_2, numberOfClasses,
style = "kmeans",
dataPrecision = 0)
colorPallette <- findColours(intervals, colors)
legendText="intervals"
shrinkLegend=1
title="Under 5 mortality rate by province"
# first the ORIGINAL to signal missing values:
plot(mozzipMap,col='red',main=title, border="black", lwd=1)
# now the info on contributions
plot(layerContrib_2, col = colorPallette,border=NA,add=T) #add
# this uses all previous information
legend('topright',
legend = names(attr(colorPallette, "table")), #values
fill = attr(colorPallette, "palette"), #colors
cex = shrinkLegend, #size
bty = "n", # no box
title=legendText)
library(classInt)
#layerContrib
numberOfClasses=5
colorForScale='OrRd'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot_2, numberOfClasses,
style = "kmeans",
dataPrecision = 0)
colorPallette <- findColours(intervals, colors)
legendText="intervals"
shrinkLegend=1
title="Under 5 mortality rate by province"
# first the ORIGINAL to signal missing values:
plot(mozzipMap,col='red',main=title, border="black", lwd=1)
# now the info on contributions
plot(layerContrib_2, col = colorPallette,border=NA,add=T) #add
# this uses all previous information
legend('topright',
legend = names(attr(colorPallette, "table")), #values
fill = attr(colorPallette, "palette"), #colors
cex = shrinkLegend, #size
bty = "n", # no box
title=legendText)
library(classInt)
#layerContrib
numberOfClasses=5
colorForScale='OrRd'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot_2, numberOfClasses,
style = "kmeans",
dataPrecision = 0)
colorPallette <- findColours(intervals, colors)
legendText="intervals"
shrinkLegend=1
title="Under 5 mortality rate by province"
# first the ORIGINAL to signal missing values:
plot(mozzipMap,col='red',main=title, border="black", lwd=1)
# now the info on contributions
plot(layerContrib_2, col = colorPallette,border=NA,add=T) #add
# this uses all previous information
legend('topright',
legend = names(attr(colorPallette, "table")), #values
fill = attr(colorPallette, "palette"), #colors
cex = shrinkLegend, #size
bty = "n", # no box
title=legendText)
library(classInt)
#layerContrib
numberOfClasses=5
colorForScale='OrRd'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot_2, numberOfClasses,
style = "kmeans",
dataPrecision = 0)
colorPallette <- findColours(intervals, colors)
legendText="intervals"
shrinkLegend=1
title="Under 5 mortality rate by province"
# first the ORIGINAL to signal missing values:
plot(mozzipMap,col='red',main=title, border="black", lwd=1)
# now the info on contributions
plot(layerContrib_2, col = colorPallette,border=NA,add=T) #add
# this uses all previous information
legend('topright',
legend = names(attr(colorPallette, "table")), #values
fill = attr(colorPallette, "palette"), #colors
cex = shrinkLegend, #size
bty = "n", # no box
title=legendText)
legendText="intervals"
shrinkLegend=1
title="Under 5 mortality rate in Mozambique by province (2010)"
# first the ORIGINAL to signal missing values:
plot(mozzipMap,col='red',main=title, border="black", lwd=1)
# now the info on contributions
plot(layerContrib_2, col = colorPallette,border=NA,add=T) #add
# this uses all previous information
legend('topright',
legend = names(attr(colorPallette, "table")), #values
fill = attr(colorPallette, "palette"), #colors
cex = shrinkLegend, #size
bty = "n", # no box
title=legendText)
library(classInt)
#layerContrib
numberOfClasses=5
colorForScale='OrRd'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot_2, numberOfClasses,
style = "quantiles",
dataPrecision = 0)
library(classInt)
#layerContrib
numberOfClasses=5
colorForScale='OrRd'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot_2, numberOfClasses,
style = "quantile",
dataPrecision = 0)
colorPallette <- findColours(intervals, colors)
legendText="intervals"
shrinkLegend=1
title="Under 5 mortality rate in Mozambique by province (2010)"
# first the ORIGINAL to signal missing values:
plot(mozzipMap,col='red',main=title, border="black", lwd=1)
# now the info on contributions
plot(layerContrib_2, col = colorPallette,border=NA,add=T) #add
# this uses all previous information
legend('topright',
legend = names(attr(colorPallette, "table")), #values
fill = attr(colorPallette, "palette"), #colors
cex = shrinkLegend, #size
bty = "n", # no box
title=legendText)
library(classInt)
#layerContrib
numberOfClasses=5
colorForScale='OrRd'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot_2, numberOfClasses,
style = "kmeans",
dataPrecision = 0)
colorPallette <- findColours(intervals, colors)
legendText="intervals"
shrinkLegend=1
title="Under 5 mortality rate in Mozambique by province (2010)"
# first the ORIGINAL to signal missing values:
plot(mozzipMap,col='red',main=title, border="black", lwd=1)
# now the info on contributions
plot(layerContrib_2, col = colorPallette,border=NA,add=T) #add
# this uses all previous information
legend('topright',
legend = names(attr(colorPallette, "table")), #values
fill = attr(colorPallette, "palette"), #colors
cex = shrinkLegend, #size
bty = "n", # no box
title=legendText)
df_new$u5_change[df_new$province_num==1] <- df_new$U5M_COMB[df_new$province_num==1] - df$U5M_COMB[df$province_num==1 & df$year==2000]
df_new$u5_change[df_new$province_num==1] <- (df_new$U5M_COMB[df_new$province_num==1] - df$U5M_COMB[df$province_num==1 & df$year==2000])/df$U5M_COMB[df$province_num==1 & df$year==2000]
df_new$u5_change[df_new$province_num==1] <- 100*(df_new$U5M_COMB[df_new$province_num==1] - df$U5M_COMB[df$province_num==1 & df$year==2000])/df$U5M_COMB[df$province_num==1 & df$year==2000]
df_new$u5_change[df_new$province_num==2] <- (df_new$U5M_COMB[df_new$province_num==2] - df$U5M_COMB[df$province_num==2 & df$year==2000])/df$U5M_COMB[df$province_num==2 & df$year==2000]
df_new$u5_change[df_new$province_num==3] <- (df_new$U5M_COMB[df_new$province_num==3] - df$U5M_COMB[df$province_num==3 & df$year==2000])/df$U5M_COMB[df$province_num==3 & df$year==2000]
df_new$u5_change[df_new$province_num==4] <- (df_new$U5M_COMB[df_new$province_num==4] - df$U5M_COMB[df$province_num==4 & df$year==2000])/df$U5M_COMB[df$province_num==4 & df$year==2000]
df_new$u5_change[df_new$province_num==5] <- (df_new$U5M_COMB[df_new$province_num==5] - df$U5M_COMB[df$province_num==5 & df$year==2000])/df$U5M_COMB[df$province_num==5 & df$year==2000]
df_new$u5_change[df_new$province_num==6] <- (df_new$U5M_COMB[df_new$province_num==6] - df$U5M_COMB[df$province_num==6 & df$year==2000])/df$U5M_COMB[df$province_num==6 & df$year==2000]
df_new$u5_change[df_new$province_num==7] <- (df_new$U5M_COMB[df_new$province_num==7] - df$U5M_COMB[df$province_num==7 & df$year==2000])/df$U5M_COMB[df$province_num==7 & df$year==2000]
df_new$u5_change[df_new$province_num==8] <- (df_new$U5M_COMB[df_new$province_num==8] - df$U5M_COMB[df$province_num==8 & df$year==2000])/df$U5M_COMB[df$province_num==8 & df$year==2000]
df_new$u5_change[df_new$province_num==9] <- (df_new$U5M_COMB[df_new$province_num==9] - df$U5M_COMB[df$province_num==9 & df$year==2000])/df$U5M_COMB[df$province_num==9 & df$year==2000]
df_new$u5_change[df_new$province_num==10] <- (df_new$U5M_COMB[df_new$province_num==10] - df$U5M_COMB[df$province_num==10 & df$year==2000])/df$U5M_COMB[df$province_num==10 & df$year==2000]
df_new$u5_change[df_new$province_num==11] <- (df_new$U5M_COMB[df_new$province_num==11] - df$U5M_COMB[df$province_num==11 & df$year==2000])/df$U5M_COMB[df$province_num==11 & df$year==2000]
#creating change in u5 mortality rate from 2000 - 2010
df_new$u5_change[df_new$province_num==1] <- 100*(df_new$U5M_COMB[df_new$province_num==1] - df$U5M_COMB[df$province_num==1 & df$year==2000])/df$U5M_COMB[df$province_num==1 & df$year==2000]
df_new$u5_change[df_new$province_num==2] <- 100*(df_new$U5M_COMB[df_new$province_num==2] - df$U5M_COMB[df$province_num==2 & df$year==2000])/df$U5M_COMB[df$province_num==2 & df$year==2000]
df_new$u5_change[df_new$province_num==3] <- 100*(df_new$U5M_COMB[df_new$province_num==3] - df$U5M_COMB[df$province_num==3 & df$year==2000])/df$U5M_COMB[df$province_num==3 & df$year==2000]
df_new$u5_change[df_new$province_num==4] <- 100*(df_new$U5M_COMB[df_new$province_num==4] - df$U5M_COMB[df$province_num==4 & df$year==2000])/df$U5M_COMB[df$province_num==4 & df$year==2000]
df_new$u5_change[df_new$province_num==5] <- 100*(df_new$U5M_COMB[df_new$province_num==5] - df$U5M_COMB[df$province_num==5 & df$year==2000])/df$U5M_COMB[df$province_num==5 & df$year==2000]
df_new$u5_change[df_new$province_num==6] <- 100*(df_new$U5M_COMB[df_new$province_num==6] - df$U5M_COMB[df$province_num==6 & df$year==2000])/df$U5M_COMB[df$province_num==6 & df$year==2000]
df_new$u5_change[df_new$province_num==7] <- 100*(df_new$U5M_COMB[df_new$province_num==7] - df$U5M_COMB[df$province_num==7 & df$year==2000])/df$U5M_COMB[df$province_num==7 & df$year==2000]
df_new$u5_change[df_new$province_num==8] <- 100*(df_new$U5M_COMB[df_new$province_num==8] - df$U5M_COMB[df$province_num==8 & df$year==2000])/df$U5M_COMB[df$province_num==8 & df$year==2000]
df_new$u5_change[df_new$province_num==9] <- 100*(df_new$U5M_COMB[df_new$province_num==9] - df$U5M_COMB[df$province_num==9 & df$year==2000])/df$U5M_COMB[df$province_num==9 & df$year==2000]
df_new$u5_change[df_new$province_num==10] <- 100*(df_new$U5M_COMB[df_new$province_num==10] - df$U5M_COMB[df$province_num==10 & df$year==2000])/df$U5M_COMB[df$province_num==10 & df$year==2000]
df_new$u5_change[df_new$province_num==11] <- 100*(df_new$U5M_COMB[df_new$province_num==11] - df$U5M_COMB[df$province_num==11 & df$year==2000])/df$U5M_COMB[df$province_num==11 & df$year==2000]
layerContrib_2=merge(mozzipMap,df_new, by.x='province_num', by.y='province_num',all.x=F)
varToPlot_2=layerContrib_2$U5M_COMB
library(classInt)
#layerContrib
numberOfClasses=5
colorForScale='OrRd'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot_2, numberOfClasses,
style = "kmeans",
dataPrecision = 0)
colorPallette <- findColours(intervals, colors)
legendText="intervals"
shrinkLegend=1
title="Under 5 mortality rate in Mozambique by province (2010)"
# first the ORIGINAL to signal missing values:
plot(mozzipMap,col='red',main=title, border="black", lwd=1)
# now the info on contributions
plot(layerContrib_2, col = colorPallette,border=NA,add=T) #add
# this uses all previous information
legend('topright',
legend = names(attr(colorPallette, "table")), #values
fill = attr(colorPallette, "palette"), #colors
cex = shrinkLegend, #size
bty = "n", # no box
title=legendText)
varToPlot_3=layerContrib_2$u5_change
library(classInt)
#layerContrib
numberOfClasses=5
colorForScale='OrRd'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot_3, numberOfClasses,
style = "kmeans",
dataPrecision = 0)
colorPallette <- findColours(intervals, colors)
legendText="intervals"
shrinkLegend=1
title="Under 5 mortality rate in Mozambique by province (2010)"
# first the ORIGINAL to signal missing values:
plot(mozzipMap,col='red',main=title, border="black", lwd=1)
# now the info on contributions
plot(layerContrib_2, col = colorPallette,border=NA,add=T) #add
# this uses all previous information
legend('topright',
legend = names(attr(colorPallette, "table")), #values
fill = attr(colorPallette, "palette"), #colors
cex = shrinkLegend, #size
bty = "n", # no box
title=legendText)
legendText="intervals"
shrinkLegend=1
title="Under 5 mortality rate in Mozambique by province (2010)"
# first the ORIGINAL to signal missing values:
plot(mozzipMap,col='red',main=title, border="black", lwd=1)
# now the info on contributions
plot(layerContrib_3, col = colorPallette,border=NA,add=T) #add
layerContrib_3=merge(mozzipMap,df_new, by.x='province_num', by.y='province_num',all.x=F)
varToPlot_3=layerContrib_2$u5_change
library(classInt)
#layerContrib
numberOfClasses=5
colorForScale='OrRd'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot_3, numberOfClasses,
style = "kmeans",
dataPrecision = 0)
colorPallette <- findColours(intervals, colors)
legendText="intervals"
shrinkLegend=1
title="Under 5 mortality rate in Mozambique by province (2010)"
# first the ORIGINAL to signal missing values:
plot(mozzipMap,col='red',main=title, border="black", lwd=1)
# now the info on contributions
plot(layerContrib_3, col = colorPallette,border=NA,add=T) #add
# this uses all previous information
legend('topright',
legend = names(attr(colorPallette, "table")), #values
fill = attr(colorPallette, "palette"), #colors
cex = shrinkLegend, #size
bty = "n", # no box
title=legendText)
library(classInt)
#layerContrib
numberOfClasses=5
colorForScale='Spectral'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot_3, numberOfClasses,
style = "kmeans",
dataPrecision = 0)
colorPallette <- findColours(intervals, colors)
legendText="intervals"
shrinkLegend=1
title="Percent change in u5 mortality rate in Mozambique by province (2000-2010)"
# first the ORIGINAL to signal missing values:
plot(mozzipMap,col='red',main=title, border="black", lwd=1)
# now the info on contributions
plot(layerContrib_3, col = colorPallette,border=NA,add=T) #add
# this uses all previous information
legend('topright',
legend = names(attr(colorPallette, "table")), #values
fill = attr(colorPallette, "palette"), #colors
cex = shrinkLegend, #size
bty = "n", # no box
title=legendText)
library(classInt)
#layerContrib
numberOfClasses=5
colorForScale='RdGy'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot_3, numberOfClasses,
style = "kmeans",
dataPrecision = 0)
colorPallette <- findColours(intervals, colors)
legendText="intervals"
shrinkLegend=1
title="Percent change in u5 mortality rate in Mozambique by province (2000-2010)"
# first the ORIGINAL to signal missing values:
plot(mozzipMap,col='red',main=title, border="black", lwd=1)
# now the info on contributions
plot(layerContrib_3, col = colorPallette,border=NA,add=T) #add
# this uses all previous information
legend('topright',
legend = names(attr(colorPallette, "table")), #values
fill = attr(colorPallette, "palette"), #colors
cex = shrinkLegend, #size
bty = "n", # no box
title=legendText)
library(classInt)
#layerContrib
numberOfClasses=5
colorForScale='GyRd'
colors = brewer.pal(numberOfClasses, colorForScale)
library(classInt)
#layerContrib
numberOfClasses=5
colorForScale='Blues'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot_3, numberOfClasses,
style = "kmeans",
dataPrecision = 0)
colorPallette <- findColours(intervals, colors)
legendText="intervals"
shrinkLegend=1
title="Percent change in u5 mortality rate in Mozambique by province (2000-2010)"
# first the ORIGINAL to signal missing values:
plot(mozzipMap,col='red',main=title, border="black", lwd=1)
# now the info on contributions
plot(layerContrib_3, col = colorPallette,border=NA,add=T) #add
# this uses all previous information
legend('topright',
legend = names(attr(colorPallette, "table")), #values
fill = attr(colorPallette, "palette"), #colors
cex = shrinkLegend, #size
bty = "n", # no box
title=legendText)
legendText="intervals"
shrinkLegend=1
title="Percent change in u5 mortality rate in Mozambique by province /n(2000-2010)"
# first the ORIGINAL to signal missing values:
plot(mozzipMap,col='red',main=title, border="black", lwd=1)
# now the info on contributions
plot(layerContrib_3, col = colorPallette,border=NA,add=T) #add
# this uses all previous information
legend('topright',
legend = names(attr(colorPallette, "table")), #values
fill = attr(colorPallette, "palette"), #colors
cex = shrinkLegend, #size
bty = "n", # no box
title=legendText)
legendText="intervals"
shrinkLegend=1
title="Percent change in u5 mortality rate in Mozambique by province \n(2000-2010)"
# first the ORIGINAL to signal missing values:
plot(mozzipMap,col='red',main=title, border="black", lwd=1)
# now the info on contributions
plot(layerContrib_3, col = colorPallette,border=NA,add=T) #add
# this uses all previous information
legend('topright',
legend = names(attr(colorPallette, "table")), #values
fill = attr(colorPallette, "palette"), #colors
cex = shrinkLegend, #size
bty = "n", # no box
title=legendText)
library(classInt)
#layerContrib
numberOfClasses=5
colorForScale='colorRamps::blue2red'
colors = brewer.pal(numberOfClasses, colorForScale)
library(classInt)
#layerContrib
numberOfClasses=5
colorForScale='YlOrRd'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot_3, numberOfClasses,
style = "kmeans",
dataPrecision = 0)
colorPallette <- findColours(intervals, colors)
legendText="intervals"
shrinkLegend=1
title="Percent change in u5 mortality rate in Mozambique by province \n(2000-2010)"
# first the ORIGINAL to signal missing values:
plot(mozzipMap,col='red',main=title, border="black", lwd=1)
# now the info on contributions
plot(layerContrib_3, col = colorPallette,border=NA,add=T) #add
# this uses all previous information
legend('topright',
legend = names(attr(colorPallette, "table")), #values
fill = attr(colorPallette, "palette"), #colors
cex = shrinkLegend, #size
bty = "n", # no box
title=legendText)
library(classInt)
#layerContrib
numberOfClasses=5
colorForScale='Greys'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot, numberOfClasses,
style = "quantile",
dataPrecision = 1)
colorPallette <- findColours(intervals, colors)
library(RColorBrewer)
colors <- brewer.pal(9, "BuGn")
varToPlot=layerContrib$ape_contrib
library(classInt)
numberOfClasses=5
colorForScale='Greys'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot, numberOfClasses,
style = "quantile",
dataPrecision = 1)
colorPallette <- findColours(intervals, colors)
library(classInt)
numberOfClasses=5
colorForScale='BuGn'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot, numberOfClasses,
style = "quantile",
dataPrecision = 1)
colorPallette <- findColours(intervals, colors)
legendText="intervals"
shrinkLegend=1
title="Average Contribution of CHWs in Mozambique"
# first the ORIGINAL to signal missing values:
plot(mozzipMap,col='red',main=title, border="black", lwd=1)
# now the info on contributions
plot(layerContrib, col = colorPallette,border=NA,add=T) #add
# this uses all previous information
legend('topright',
legend = names(attr(colorPallette, "table")), #values
fill = attr(colorPallette, "palette"), #colors
cex = shrinkLegend, #size
bty = "n", # no box
title=legendText)
library(ggplot2)
library(ggrepel)
library(foreign)
library(haven)
knitr::opts_chunk$set(echo = TRUE, warning=TRUE, message=TRUE)
link="https://github.com/quinhasf/pubpol-599/raw/master/ape_analysis.dta"
chw_fp <- read_dta(url(link))
# notice the parameters use in the chunk!!
library(rgdal)
mozzipMap <- readOGR("MOZ-level_1.shp",stringsAsFactors=F)
# notice the parameters use in the chunk!!
library(rgdal)
mozzipMap <- readOGR("MOZ-level_1.shp",stringsAsFactors=F)
#DMC - showing which tempfiles are in the directory
(maps=list.files(pattern = 'shp'))
library(utils)
temp=tempfile()
download.file(zip_mozmap_SHP, temp)
unzip(temp)
#DMC - showing which tempfiles are in the directory
(maps=list.files(pattern = 'shp'))
# notice the parameters use in the chunk!!
library(rgdal)
mozzipMap <- readOGR("MOZ-level_1.shp",stringsAsFactors=F)
#DMC - showing which tempfiles are in the directory
(maps=list.files(pattern = 'shp'))
#link="https://github.com/quinhasf/pubpol-599/raw/master/ape_analysis.dta"
#chw_fp <- read_dta(url(link))
link="https://github.com/ihsun-uw/Group3_Final_Project/raw/master/child_mortality.dta"
df <- read_dta(url(link))
zip_mozmap_SHP = "https://github.com/ihsun-uw/Group3_Final_Project/raw/master/Mozambique%20shape%20maps.zip"
library(utils)
temp=tempfile()
download.file(zip_mozmap_SHP, temp)
unzip(temp)
#DMC - showing which tempfiles are in the directory
(maps=list.files(pattern = 'shp'))
#link="https://github.com/quinhasf/pubpol-599/raw/master/ape_analysis.dta"
#chw_fp <- read_dta(url(link))
link="https://github.com/ihsun-uw/Group3_Final_Project/raw/master/child_mortality.dta"
df <- read_dta(url(link))
zip_mozmap_SHP = "https://github.com/ihsun-uw/Group3_Final_Project/raw/master/Mozambique%20shape%20maps.zip"
# notice the parameters use in the chunk!!
library(rgdal)
mozzipMap <- readOGR("MOZ-level_1.shp",stringsAsFactors=F)
#DMC - showing which tempfiles are in the directory
(maps=list.files(pattern = 'shp'))
install.packages("utilsIPEA", repos = "http://cran.us.r-project.org")
install.packages("rgdal", repos = "http://cran.us.r-project.org")
install.packages("raster", repos = "http://cran.us.r-project.org")
install.packages("tmaptools", repos = "http://cran.us.r-project.org")
install.packages("mapshaper", repos = "http://cran.us.r-project.org")
install.packages("tmap", repos = "http://cran.us.r-project.org")
install.packages("leaflet", repos = "http://cran.us.r-project.org")
install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
install.packages("classint", repos = "http://cran.us.r-project.org")
install.packages("dplyr", repos = "http://cran.us.r-project.org")
